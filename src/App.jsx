import React, { useState } from 'react'
import data from './curriculum.json'

function percentToStars(pct){
  if(pct >= 80) return 3
  if(pct >= 60) return 2
  if(pct > 0) return 1
  return 0
}

export default function App(){
  const [route,setRoute] = useState('levels') // levels | map | unit | gen-img | gen-video
  const [unitId,setUnitId] = useState(null)
  const [progress,setProgress] = useState({}) // unitId -> stars
  const beginner = data.levels.find(l=>l.id==='beginner')
  const units = beginner.units

  const canGenImage = (progress['prompting']||0) >= 2
  const canGenVideo = (progress['animation']||0) >= 2

  return <div className='container'>
    <header className='row' style={{justifyContent:'space-between', marginBottom:12}}>
      <div className='row'><b>(–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∂–µ)</b><span className='badge'>‚≠ê {Object.values(progress).reduce((a,b)=>a+b,0)}</span></div>
      <div className='row'>
        <button className={canGenImage?'btn':'btn lock'} onClick={()=>{ if(canGenImage) setRoute('gen-img')}}>{canGenImage?'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':'–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ üîí'}</button>
        <button className={canGenVideo?'btn':'btn lock'} onClick={()=>{ if(canGenVideo) setRoute('gen-video')}}>{canGenVideo?'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ':'–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ üîí'}</button>
      </div>
    </header>

    {route === 'levels' && <Levels onPick={()=> setRoute('map')} />}
    {route === 'map' && <Map units={units} progress={progress} onOpen={(id)=>{ setUnitId(id); setRoute('unit') }} onBack={()=>setRoute('levels')} />}
    {route === 'unit' && <UnitView unit={units.find(u=>u.id===unitId)} onExit={()=>setRoute('map')} onFinish={(pct)=>{
      const stars = percentToStars(pct)
      setProgress(p=>({...p,[unitId]:Math.max(stars, p[unitId]||0)}))
      setRoute('map')
    }} />}
    {route === 'gen-img' && <Generator type='image' onBack={()=>setRoute('map')} />}
    {route === 'gen-video' && <Generator type='video' onBack={()=>setRoute('map')} />}
  </div>
}

function Levels({onPick}){
  const levels = [
    {id:'beginner', title:'–ù–æ–≤–∏—á–æ–∫', locked:false},
    {id:'intermediate', title:'–°—Ä–µ–¥–Ω–∏–π', locked:true},
    {id:'advanced', title:'–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', locked:true},
  ]
  return <div>
    <h2>–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å</h2>
    <p className='subtitle'>–≠—Ç–æ –æ–±—É—á–∞—é—â–∏–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≥—Ä—É–∑–∏—Ç —Ç–µ–±—è –≤ –º–∏—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π ‚Äî –ª–µ–≥–∫–æ –∏ –∏–≥—Ä–∞—é—á–∏. –ü–æ 15‚Äì20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å, –∏ –∑–∞ –º–µ—Å—è—Ü —Ç—ã –æ—Å–≤–æ–∏—à—å –æ—Å–Ω–æ–≤—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.</p>
    <div className='grid g-3'>
      {levels.map(l=>(
        <div key={l.id} className='card'>
          <div className='card-body'>
            <h3>{l.title}</h3>
            <p className='subtitle'>{l.locked?'–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ':'–Ω–∞—á–Ω—ë–º —Å –∞–∑–æ–≤'}</p>
            <button className={l.locked?'btn lock':'btn'} onClick={()=>!l.locked && onPick(l.id)}>{l.locked?'üîí':'–ü–æ–µ—Ö–∞–ª–∏'}</button>
          </div>
        </div>
      ))}
    </div>
  </div>
}

function Map({units, progress, onOpen, onBack}){
  return <div>
    <h2>–ö–∞—Ä—Ç–∞: –ù–æ–≤–∏—á–æ–∫</h2>
    <p className='subtitle'>–ü—Ä–æ—Ö–æ–¥–∏ —é–Ω–∏—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π ‚≠ê</p>
    <div className='grid g-3'>
      {units.map(u=>(
        <div key={u.id} className='card'>
          <div className='card-body'>
            <h3>{u.title}</h3>
            <div className='subtitle'>
              {u.objectives?.map((o,i)=>(<span key={i} className='tag'>{o}</span>))}
            </div>
            <div className='row' style={{justifyContent:'space-between'}}>
              <span className='badge'>‚≠ê {progress[u.id]||0}/3</span>
              <button className='btn' onClick={()=>onOpen(u.id)}>–û—Ç–∫—Ä—ã—Ç—å</button>
            </div>
          </div>
        </div>
      ))}
    </div>
    <div className='row' style={{marginTop:12}}>
      <button className='btn ghost' onClick={onBack}>–ù–∞–∑–∞–¥</button>
    </div>
  </div>
}

function UnitView({unit, onExit, onFinish}){
  const [step,setStep] = useState('intro') // intro | quiz
  const [i,setI] = useState(0)
  const [correct,setCorrect] = useState(0)
  const tasks = unit.questions||[]
  const pct = tasks.length? Math.round(100*correct/tasks.length):0

  if(step==='intro'){
    return <div className='card'>
      <div className='card-body'>
        <h3>{unit.title}</h3>
        <p className='subtitle'>{unit.intro}</p>
        <div className='row' style={{justifyContent:'space-between'}}>
          <button className='btn ghost' onClick={onExit}>–ù–∞–∑–∞–¥</button>
          <button className='btn' onClick={()=>setStep('quiz')}>–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ</button>
        </div>
      </div>
    </div>
  }

  const t = tasks[i]
  const last = i>=tasks.length
  if(last){
    return <div className='card'>
      <div className='card-body center'>
        <h3>–Æ–Ω–∏—Ç –ø—Ä–æ–π–¥–µ–Ω!</h3>
        <p className='subtitle'>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {tasks.length} ({pct}%)</p>
        <p className='subtitle'>–ó–≤—ë–∑–¥—ã: {pct>=80? '‚òÖ‚òÖ‚òÖ' : pct>=60? '‚òÖ‚òÖ' : pct>0? '‚òÖ' : '0'}</p>
        <button className='btn' onClick={()=>onFinish(pct)}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É</button>
        {pct<60 && <p className='subtitle' style={{marginTop:8}}>–ù–µ –¥–æ—Ç—è–Ω—É–ª–∏ –¥–æ 2‚≠ê. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ ‚Äì –ø–µ—Ä–µ—á–∏—Ç–∞–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–π–¥–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.</p>}
      </div>
    </div>
  }

  return <div className='card'>
    <div className='card-body'>
      <div className='row' style={{justifyContent:'space-between'}}>
        <button className='btn ghost' onClick={()=>{ if(window.confirm('–í—ã–π—Ç–∏ –∏–∑ —é–Ω–∏—Ç–∞?')) onExit() }}>–ù–∞–∑–∞–¥</button>
        <span className='badge'>–®–∞–≥ {i+1}/{tasks.length}</span>
      </div>
      <div className='q'>
        <b>{t.q}</b>
        {t.type==='choice' && <Choice t={t} onNext={(ok)=>{ if(ok) setCorrect(v=>v+1); setI(i+1) }} />}
        {t.type==='input' && <InputQ t={t} onNext={(ok)=>{ if(ok) setCorrect(v=>v+1); setI(i+1) }} />}
      </div>
    </div>
  </div>
}

function Choice({t,onNext}){
  const [state,setState]=useState(null)
  return <div>
    <div className='choices'>
      {t.options.map((opt,idx)=>{
        const cls = state===null ? '' : (idx===t.answer ? 'correct' : (state==='bad' && idx!==t.answer?'wrong':''))
        return <button key={idx} className={cls} onClick={()=>{
          const ok = idx===t.answer; setState(ok?'ok':'bad')
          setTimeout(()=>onNext(ok), 600)
        }}>{opt}</button>
      })}
    </div>
  </div>
}

function InputQ({t,onNext}){
  const [val,setVal] = useState('')
  return <div style={{marginTop:12}}>
    <input placeholder='–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç...' value={val} onChange={e=>setVal(e.target.value)} />
    <div className='row' style={{justifyContent:'flex-end', marginTop:12}}>
      <button className='btn' onClick={()=>{
        const ok = (val||'').trim().length >= (t.check_min_len || 5)
        onNext(ok)
      }}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    </div>
  </div>
}

function Generator({type, onBack}){
  return <div className='card'>
    <div className='card-body center'>
      <h3>{type==='image'?'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫':'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ'}</h3>
      <p className='subtitle'>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –î–ª—è MVP ‚Äî –∑–∞–≥–ª—É—à–∫–∞.</p>
      <div className='tag'>–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ</div>
      <div className='row' style={{justifyContent:'center', marginTop:12}}>
        <button className='btn ghost' onClick={onBack}>–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  </div>
}
